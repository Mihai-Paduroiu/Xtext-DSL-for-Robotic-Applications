/*
 * generated by Xtext 2.34.0-SNAPSHOT
 */
package org.xtext.example.mydsl.scoping;
/*	import org.eclipse.emf.ecore.EObject;
	import org.eclipse.emf.ecore.EReference;
	import org.eclipse.emf.ecore.util.EcoreUtil;
	import org.eclipse.xtext.scoping.IScope;
	import org.eclipse.xtext.scoping.Scopes;
	import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
	import org.xtext.example.mydsl.myDsl.Executor;
	import org.xtext.example.mydsl.myDsl.Node;
	import org.xtext.example.mydsl.myDsl.ServiceCallback;
	import org.xtext.example.mydsl.myDsl.SubscriberCallback;
	import org.xtext.example.mydsl.myDsl.System;
	import org.xtext.example.mydsl.myDsl.SystemModel;
	import org.xtext.example.mydsl.myDsl.ClientCallback;
	import org.xtext.example.mydsl.myDsl.TimerCallback;

import java.util.ArrayList;
import java.util.List; */

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {
	/*public IScope scope_Executor_executedCallbacks(Executor context, EReference reference) {
	    SystemModel systemModel = (SystemModel) EcoreUtil.getRootContainer(context);
	    List<EObject> allCallbacks = new ArrayList<>();

        for (System system : systemModel.getSystems()) {
            for (Node node : system.getNodes()) {
                allCallbacks.addAll(node.getSubscribers());
                allCallbacks.addAll(node.getServices());
                allCallbacks.addAll(node.getServicerequests());
                allCallbacks.addAll(node.getClients());
                allCallbacks.addAll(node.getTimers());
            }
        }

        return Scopes.scopeFor(allCallbacks);
    } */
}