/**
 * generated by Xtext 2.36.0-SNAPSHOT
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.Callback;
import org.xtext.example.mydsl.myDsl.ClientCallback;
import org.xtext.example.mydsl.myDsl.Executor;
import org.xtext.example.mydsl.myDsl.ExecutorType;
import org.xtext.example.mydsl.myDsl.MyDslFactory;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Node;
import org.xtext.example.mydsl.myDsl.PeriodicTimer;
import org.xtext.example.mydsl.myDsl.Publisher;
import org.xtext.example.mydsl.myDsl.Service;
import org.xtext.example.mydsl.myDsl.ServiceCallback;
import org.xtext.example.mydsl.myDsl.ServiceRequest;
import org.xtext.example.mydsl.myDsl.SubscriberCallback;
import org.xtext.example.mydsl.myDsl.SystemModel;
import org.xtext.example.mydsl.myDsl.SystemTimer;
import org.xtext.example.mydsl.myDsl.TimerCallback;
import org.xtext.example.mydsl.myDsl.Topic;
import org.xtext.example.mydsl.myDsl.Walltimer;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.SYSTEM_MODEL: return createSystemModel();
      case MyDslPackage.SYSTEM: return createSystem();
      case MyDslPackage.NODE: return createNode();
      case MyDslPackage.CALLBACK: return createCallback();
      case MyDslPackage.EXECUTOR: return createExecutor();
      case MyDslPackage.SERVICE: return createService();
      case MyDslPackage.SERVICE_REQUEST: return createServiceRequest();
      case MyDslPackage.TOPIC: return createTopic();
      case MyDslPackage.PUBLISHER: return createPublisher();
      case MyDslPackage.SUBSCRIBER_CALLBACK: return createSubscriberCallback();
      case MyDslPackage.SERVICE_CALLBACK: return createServiceCallback();
      case MyDslPackage.CLIENT_CALLBACK: return createClientCallback();
      case MyDslPackage.TIMER_CALLBACK: return createTimerCallback();
      case MyDslPackage.SYSTEM_TIMER: return createSystemTimer();
      case MyDslPackage.PERIODIC_TIMER: return createPeriodicTimer();
      case MyDslPackage.WALLTIMER: return createWalltimer();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.EXECUTOR_TYPE:
        return createExecutorTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.EXECUTOR_TYPE:
        return convertExecutorTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemModel createSystemModel()
  {
    SystemModelImpl systemModel = new SystemModelImpl();
    return systemModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.System createSystem()
  {
    SystemImpl system = new SystemImpl();
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Callback createCallback()
  {
    CallbackImpl callback = new CallbackImpl();
    return callback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Executor createExecutor()
  {
    ExecutorImpl executor = new ExecutorImpl();
    return executor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceRequest createServiceRequest()
  {
    ServiceRequestImpl serviceRequest = new ServiceRequestImpl();
    return serviceRequest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Topic createTopic()
  {
    TopicImpl topic = new TopicImpl();
    return topic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Publisher createPublisher()
  {
    PublisherImpl publisher = new PublisherImpl();
    return publisher;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubscriberCallback createSubscriberCallback()
  {
    SubscriberCallbackImpl subscriberCallback = new SubscriberCallbackImpl();
    return subscriberCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceCallback createServiceCallback()
  {
    ServiceCallbackImpl serviceCallback = new ServiceCallbackImpl();
    return serviceCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClientCallback createClientCallback()
  {
    ClientCallbackImpl clientCallback = new ClientCallbackImpl();
    return clientCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimerCallback createTimerCallback()
  {
    TimerCallbackImpl timerCallback = new TimerCallbackImpl();
    return timerCallback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemTimer createSystemTimer()
  {
    SystemTimerImpl systemTimer = new SystemTimerImpl();
    return systemTimer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeriodicTimer createPeriodicTimer()
  {
    PeriodicTimerImpl periodicTimer = new PeriodicTimerImpl();
    return periodicTimer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Walltimer createWalltimer()
  {
    WalltimerImpl walltimer = new WalltimerImpl();
    return walltimer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExecutorType createExecutorTypeFromString(EDataType eDataType, String initialValue)
  {
    ExecutorType result = ExecutorType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExecutorTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
