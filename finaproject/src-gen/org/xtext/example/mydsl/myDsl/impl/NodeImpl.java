/**
 * generated by Xtext 2.36.0-SNAPSHOT
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.ClientCallback;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Node;
import org.xtext.example.mydsl.myDsl.Publisher;
import org.xtext.example.mydsl.myDsl.ServiceCallback;
import org.xtext.example.mydsl.myDsl.ServiceRequest;
import org.xtext.example.mydsl.myDsl.SubscriberCallback;
import org.xtext.example.mydsl.myDsl.TimerCallback;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NodeImpl#getNodeName <em>Node Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NodeImpl#getPublishers <em>Publishers</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NodeImpl#getSubscribers <em>Subscribers</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NodeImpl#getServices <em>Services</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NodeImpl#getServicerequests <em>Servicerequests</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NodeImpl#getClients <em>Clients</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.NodeImpl#getTimers <em>Timers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeImpl extends MinimalEObjectImpl.Container implements Node
{
  /**
   * The default value of the '{@link #getNodeName() <em>Node Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeName()
   * @generated
   * @ordered
   */
  protected static final String NODE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodeName() <em>Node Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeName()
   * @generated
   * @ordered
   */
  protected String nodeName = NODE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getPublishers() <em>Publishers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPublishers()
   * @generated
   * @ordered
   */
  protected EList<Publisher> publishers;

  /**
   * The cached value of the '{@link #getSubscribers() <em>Subscribers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubscribers()
   * @generated
   * @ordered
   */
  protected EList<SubscriberCallback> subscribers;

  /**
   * The cached value of the '{@link #getServices() <em>Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServices()
   * @generated
   * @ordered
   */
  protected EList<ServiceCallback> services;

  /**
   * The cached value of the '{@link #getServicerequests() <em>Servicerequests</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServicerequests()
   * @generated
   * @ordered
   */
  protected EList<ServiceRequest> servicerequests;

  /**
   * The cached value of the '{@link #getClients() <em>Clients</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClients()
   * @generated
   * @ordered
   */
  protected EList<ClientCallback> clients;

  /**
   * The cached value of the '{@link #getTimers() <em>Timers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimers()
   * @generated
   * @ordered
   */
  protected EList<TimerCallback> timers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNodeName()
  {
    return nodeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNodeName(String newNodeName)
  {
    String oldNodeName = nodeName;
    nodeName = newNodeName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.NODE__NODE_NAME, oldNodeName, nodeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Publisher> getPublishers()
  {
    if (publishers == null)
    {
      publishers = new EObjectContainmentEList<Publisher>(Publisher.class, this, MyDslPackage.NODE__PUBLISHERS);
    }
    return publishers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SubscriberCallback> getSubscribers()
  {
    if (subscribers == null)
    {
      subscribers = new EObjectContainmentEList<SubscriberCallback>(SubscriberCallback.class, this, MyDslPackage.NODE__SUBSCRIBERS);
    }
    return subscribers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ServiceCallback> getServices()
  {
    if (services == null)
    {
      services = new EObjectContainmentEList<ServiceCallback>(ServiceCallback.class, this, MyDslPackage.NODE__SERVICES);
    }
    return services;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ServiceRequest> getServicerequests()
  {
    if (servicerequests == null)
    {
      servicerequests = new EObjectContainmentEList<ServiceRequest>(ServiceRequest.class, this, MyDslPackage.NODE__SERVICEREQUESTS);
    }
    return servicerequests;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClientCallback> getClients()
  {
    if (clients == null)
    {
      clients = new EObjectContainmentEList<ClientCallback>(ClientCallback.class, this, MyDslPackage.NODE__CLIENTS);
    }
    return clients;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TimerCallback> getTimers()
  {
    if (timers == null)
    {
      timers = new EObjectContainmentEList<TimerCallback>(TimerCallback.class, this, MyDslPackage.NODE__TIMERS);
    }
    return timers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.NODE__PUBLISHERS:
        return ((InternalEList<?>)getPublishers()).basicRemove(otherEnd, msgs);
      case MyDslPackage.NODE__SUBSCRIBERS:
        return ((InternalEList<?>)getSubscribers()).basicRemove(otherEnd, msgs);
      case MyDslPackage.NODE__SERVICES:
        return ((InternalEList<?>)getServices()).basicRemove(otherEnd, msgs);
      case MyDslPackage.NODE__SERVICEREQUESTS:
        return ((InternalEList<?>)getServicerequests()).basicRemove(otherEnd, msgs);
      case MyDslPackage.NODE__CLIENTS:
        return ((InternalEList<?>)getClients()).basicRemove(otherEnd, msgs);
      case MyDslPackage.NODE__TIMERS:
        return ((InternalEList<?>)getTimers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.NODE__NODE_NAME:
        return getNodeName();
      case MyDslPackage.NODE__PUBLISHERS:
        return getPublishers();
      case MyDslPackage.NODE__SUBSCRIBERS:
        return getSubscribers();
      case MyDslPackage.NODE__SERVICES:
        return getServices();
      case MyDslPackage.NODE__SERVICEREQUESTS:
        return getServicerequests();
      case MyDslPackage.NODE__CLIENTS:
        return getClients();
      case MyDslPackage.NODE__TIMERS:
        return getTimers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.NODE__NODE_NAME:
        setNodeName((String)newValue);
        return;
      case MyDslPackage.NODE__PUBLISHERS:
        getPublishers().clear();
        getPublishers().addAll((Collection<? extends Publisher>)newValue);
        return;
      case MyDslPackage.NODE__SUBSCRIBERS:
        getSubscribers().clear();
        getSubscribers().addAll((Collection<? extends SubscriberCallback>)newValue);
        return;
      case MyDslPackage.NODE__SERVICES:
        getServices().clear();
        getServices().addAll((Collection<? extends ServiceCallback>)newValue);
        return;
      case MyDslPackage.NODE__SERVICEREQUESTS:
        getServicerequests().clear();
        getServicerequests().addAll((Collection<? extends ServiceRequest>)newValue);
        return;
      case MyDslPackage.NODE__CLIENTS:
        getClients().clear();
        getClients().addAll((Collection<? extends ClientCallback>)newValue);
        return;
      case MyDslPackage.NODE__TIMERS:
        getTimers().clear();
        getTimers().addAll((Collection<? extends TimerCallback>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NODE__NODE_NAME:
        setNodeName(NODE_NAME_EDEFAULT);
        return;
      case MyDslPackage.NODE__PUBLISHERS:
        getPublishers().clear();
        return;
      case MyDslPackage.NODE__SUBSCRIBERS:
        getSubscribers().clear();
        return;
      case MyDslPackage.NODE__SERVICES:
        getServices().clear();
        return;
      case MyDslPackage.NODE__SERVICEREQUESTS:
        getServicerequests().clear();
        return;
      case MyDslPackage.NODE__CLIENTS:
        getClients().clear();
        return;
      case MyDslPackage.NODE__TIMERS:
        getTimers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NODE__NODE_NAME:
        return NODE_NAME_EDEFAULT == null ? nodeName != null : !NODE_NAME_EDEFAULT.equals(nodeName);
      case MyDslPackage.NODE__PUBLISHERS:
        return publishers != null && !publishers.isEmpty();
      case MyDslPackage.NODE__SUBSCRIBERS:
        return subscribers != null && !subscribers.isEmpty();
      case MyDslPackage.NODE__SERVICES:
        return services != null && !services.isEmpty();
      case MyDslPackage.NODE__SERVICEREQUESTS:
        return servicerequests != null && !servicerequests.isEmpty();
      case MyDslPackage.NODE__CLIENTS:
        return clients != null && !clients.isEmpty();
      case MyDslPackage.NODE__TIMERS:
        return timers != null && !timers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (NodeName: ");
    result.append(nodeName);
    result.append(')');
    return result.toString();
  }

} //NodeImpl
