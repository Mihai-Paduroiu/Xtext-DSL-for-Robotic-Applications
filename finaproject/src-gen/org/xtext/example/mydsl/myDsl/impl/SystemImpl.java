/**
 * generated by Xtext 2.36.0-SNAPSHOT
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Executor;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Node;
import org.xtext.example.mydsl.myDsl.PeriodicTimer;
import org.xtext.example.mydsl.myDsl.Service;
import org.xtext.example.mydsl.myDsl.Topic;
import org.xtext.example.mydsl.myDsl.Walltimer;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getSystemName <em>System Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getTopics <em>Topics</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getExecutors <em>Executors</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getServices <em>Services</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getPeriodictimers <em>Periodictimers</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.SystemImpl#getWalltimers <em>Walltimers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SystemImpl extends MinimalEObjectImpl.Container implements org.xtext.example.mydsl.myDsl.System
{
  /**
   * The default value of the '{@link #getSystemName() <em>System Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystemName()
   * @generated
   * @ordered
   */
  protected static final String SYSTEM_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSystemName() <em>System Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystemName()
   * @generated
   * @ordered
   */
  protected String systemName = SYSTEM_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getNodes() <em>Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodes()
   * @generated
   * @ordered
   */
  protected EList<Node> nodes;

  /**
   * The cached value of the '{@link #getTopics() <em>Topics</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTopics()
   * @generated
   * @ordered
   */
  protected EList<Topic> topics;

  /**
   * The cached value of the '{@link #getExecutors() <em>Executors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExecutors()
   * @generated
   * @ordered
   */
  protected EList<Executor> executors;

  /**
   * The cached value of the '{@link #getServices() <em>Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServices()
   * @generated
   * @ordered
   */
  protected EList<Service> services;

  /**
   * The cached value of the '{@link #getPeriodictimers() <em>Periodictimers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPeriodictimers()
   * @generated
   * @ordered
   */
  protected EList<PeriodicTimer> periodictimers;

  /**
   * The cached value of the '{@link #getWalltimers() <em>Walltimers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWalltimers()
   * @generated
   * @ordered
   */
  protected EList<Walltimer> walltimers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSystemName()
  {
    return systemName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSystemName(String newSystemName)
  {
    String oldSystemName = systemName;
    systemName = newSystemName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SYSTEM__SYSTEM_NAME, oldSystemName, systemName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Node> getNodes()
  {
    if (nodes == null)
    {
      nodes = new EObjectContainmentEList<Node>(Node.class, this, MyDslPackage.SYSTEM__NODES);
    }
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Topic> getTopics()
  {
    if (topics == null)
    {
      topics = new EObjectContainmentEList<Topic>(Topic.class, this, MyDslPackage.SYSTEM__TOPICS);
    }
    return topics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Executor> getExecutors()
  {
    if (executors == null)
    {
      executors = new EObjectContainmentEList<Executor>(Executor.class, this, MyDslPackage.SYSTEM__EXECUTORS);
    }
    return executors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Service> getServices()
  {
    if (services == null)
    {
      services = new EObjectContainmentEList<Service>(Service.class, this, MyDslPackage.SYSTEM__SERVICES);
    }
    return services;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PeriodicTimer> getPeriodictimers()
  {
    if (periodictimers == null)
    {
      periodictimers = new EObjectContainmentEList<PeriodicTimer>(PeriodicTimer.class, this, MyDslPackage.SYSTEM__PERIODICTIMERS);
    }
    return periodictimers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Walltimer> getWalltimers()
  {
    if (walltimers == null)
    {
      walltimers = new EObjectContainmentEList<Walltimer>(Walltimer.class, this, MyDslPackage.SYSTEM__WALLTIMERS);
    }
    return walltimers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__NODES:
        return ((InternalEList<?>)getNodes()).basicRemove(otherEnd, msgs);
      case MyDslPackage.SYSTEM__TOPICS:
        return ((InternalEList<?>)getTopics()).basicRemove(otherEnd, msgs);
      case MyDslPackage.SYSTEM__EXECUTORS:
        return ((InternalEList<?>)getExecutors()).basicRemove(otherEnd, msgs);
      case MyDslPackage.SYSTEM__SERVICES:
        return ((InternalEList<?>)getServices()).basicRemove(otherEnd, msgs);
      case MyDslPackage.SYSTEM__PERIODICTIMERS:
        return ((InternalEList<?>)getPeriodictimers()).basicRemove(otherEnd, msgs);
      case MyDslPackage.SYSTEM__WALLTIMERS:
        return ((InternalEList<?>)getWalltimers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__SYSTEM_NAME:
        return getSystemName();
      case MyDslPackage.SYSTEM__NODES:
        return getNodes();
      case MyDslPackage.SYSTEM__TOPICS:
        return getTopics();
      case MyDslPackage.SYSTEM__EXECUTORS:
        return getExecutors();
      case MyDslPackage.SYSTEM__SERVICES:
        return getServices();
      case MyDslPackage.SYSTEM__PERIODICTIMERS:
        return getPeriodictimers();
      case MyDslPackage.SYSTEM__WALLTIMERS:
        return getWalltimers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__SYSTEM_NAME:
        setSystemName((String)newValue);
        return;
      case MyDslPackage.SYSTEM__NODES:
        getNodes().clear();
        getNodes().addAll((Collection<? extends Node>)newValue);
        return;
      case MyDslPackage.SYSTEM__TOPICS:
        getTopics().clear();
        getTopics().addAll((Collection<? extends Topic>)newValue);
        return;
      case MyDslPackage.SYSTEM__EXECUTORS:
        getExecutors().clear();
        getExecutors().addAll((Collection<? extends Executor>)newValue);
        return;
      case MyDslPackage.SYSTEM__SERVICES:
        getServices().clear();
        getServices().addAll((Collection<? extends Service>)newValue);
        return;
      case MyDslPackage.SYSTEM__PERIODICTIMERS:
        getPeriodictimers().clear();
        getPeriodictimers().addAll((Collection<? extends PeriodicTimer>)newValue);
        return;
      case MyDslPackage.SYSTEM__WALLTIMERS:
        getWalltimers().clear();
        getWalltimers().addAll((Collection<? extends Walltimer>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__SYSTEM_NAME:
        setSystemName(SYSTEM_NAME_EDEFAULT);
        return;
      case MyDslPackage.SYSTEM__NODES:
        getNodes().clear();
        return;
      case MyDslPackage.SYSTEM__TOPICS:
        getTopics().clear();
        return;
      case MyDslPackage.SYSTEM__EXECUTORS:
        getExecutors().clear();
        return;
      case MyDslPackage.SYSTEM__SERVICES:
        getServices().clear();
        return;
      case MyDslPackage.SYSTEM__PERIODICTIMERS:
        getPeriodictimers().clear();
        return;
      case MyDslPackage.SYSTEM__WALLTIMERS:
        getWalltimers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SYSTEM__SYSTEM_NAME:
        return SYSTEM_NAME_EDEFAULT == null ? systemName != null : !SYSTEM_NAME_EDEFAULT.equals(systemName);
      case MyDslPackage.SYSTEM__NODES:
        return nodes != null && !nodes.isEmpty();
      case MyDslPackage.SYSTEM__TOPICS:
        return topics != null && !topics.isEmpty();
      case MyDslPackage.SYSTEM__EXECUTORS:
        return executors != null && !executors.isEmpty();
      case MyDslPackage.SYSTEM__SERVICES:
        return services != null && !services.isEmpty();
      case MyDslPackage.SYSTEM__PERIODICTIMERS:
        return periodictimers != null && !periodictimers.isEmpty();
      case MyDslPackage.SYSTEM__WALLTIMERS:
        return walltimers != null && !walltimers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (SystemName: ");
    result.append(systemName);
    result.append(')');
    return result.toString();
  }

} //SystemImpl
